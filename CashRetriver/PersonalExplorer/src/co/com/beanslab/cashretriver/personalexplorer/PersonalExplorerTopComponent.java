/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package co.com.beanslab.cashretriver.personalexplorer;

import co.com.beanslab.cashretriver.modelo.Personas;
import co.com.beanslab.cashretriver.modelo.controllers.PersonasJpaController;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//co.com.beanslab.cashretriver.personalexplorer//PersonalExplorer//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "PersonalExplorerTopComponent",
        iconBase = "co/com/beanslab/cashretriver/personalexplorer/perex16x16.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "co.com.beanslab.cashretriver.personalexplorer.PersonalExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_PersonalExplorerAction",
        preferredID = "PersonalExplorerTopComponent")
@Messages({
    "CTL_PersonalExplorerAction=PersonalExplorer",
    "CTL_PersonalExplorerTopComponent=PersonalExplorer Window",
    "HINT_PersonalExplorerTopComponent=This is a PersonalExplorer window"
})
public final class PersonalExplorerTopComponent extends TopComponent implements ExplorerManager.Provider{
    private static ExplorerManager em=new ExplorerManager();

    public PersonalExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_PersonalExplorerTopComponent());
        setToolTipText(Bundle.HINT_PersonalExplorerTopComponent());
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        beanTreeView1 = new org.openide.explorer.view.BeanTreeView();

        setLayout(new java.awt.BorderLayout());
        add(beanTreeView1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.openide.explorer.view.BeanTreeView beanTreeView1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        cargarPersonas();
        
        
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    public void cargarPersonas() {
        //        Cargamos las personas
                
                EntityManagerFactory emf =Persistence.createEntityManagerFactory("ModeloPU");
                PersonasJpaController pjc=new PersonasJpaController(emf);
                List<Personas> personas = pjc.findPersonasEntities();
                em.setRootContext(new PersonalAbstractNode(Children.create(new PersonalChildFactory(personas), true) ));
    }
    
    
}
