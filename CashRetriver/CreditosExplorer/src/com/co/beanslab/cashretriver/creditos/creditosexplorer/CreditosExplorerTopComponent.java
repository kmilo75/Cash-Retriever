/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.co.beanslab.cashretriver.creditos.creditosexplorer;

import java.util.LinkedList;
import java.util.List;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.BeanNode;
import org.openide.nodes.ChildFactory;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.co.beanslab.cashretriver.creditos.creditosexplorer//CreditosExplorer//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "CreditosExplorerTopComponent",
        iconBase = "com/co/beanslab/cashretriver/creditos/creditosexplorer/creditoexplorer-16.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "com.co.beanslab.cashretriver.creditos.creditosexplorer.CreditosExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_CreditosExplorerAction",
        preferredID = "CreditosExplorerTopComponent")
@Messages({
    "CTL_CreditosExplorerAction=CreditosExplorer",
    "CTL_CreditosExplorerTopComponent=CreditosExplorer Window",
    "HINT_CreditosExplorerTopComponent=This is a CreditosExplorer window"
})
public final class CreditosExplorerTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static ExplorerManager em = new ExplorerManager();

    static void refreshNode() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    static void crearCobro() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public CreditosExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_CreditosExplorerTopComponent());
        setToolTipText(Bundle.HINT_CreditosExplorerTopComponent());
        
        cargaCreditos();
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        em1 = new org.openide.explorer.view.BeanTreeView();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));
        add(em1);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.openide.explorer.view.BeanTreeView em1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    /**
     * MÃ©todo que llena el explorador con un query de cobros.
     */
    private void cargaCreditos() {
        
//        EntityManagerFactory emf=Persistence.createEntityManagerFactory("ModeloVergaraPU");
//        RolesJpaController rjc=new RolesJpaController(emf);
//        List<Roles> rolesEntities = rjc.findRolesEntities();
        
        List<String> ele=new LinkedList<String>();
        for (int i = 0; i < 10; i++) {
            ele.add("Hola"+i);
            System.out.println(i);
        }
        
        for (String string : ele) {
            System.out.println(string);
        }
        
        em.setRootContext(new AbstractNode(Children.create(new ElementChildFactory<String>(ele), true)));
//        em.setRootContext(new ElementRootNode(Children.create(new ElementChildFactory<String>(ele), true)));
        
        
        
    }
}
